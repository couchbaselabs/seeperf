<body>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="js/libs/jquery-1.6.2.min.js"><\/script>')</script>

<div id="stage">
  <h1>the audience is graphing</h1>
  <canvas id="c" width="800" height="400"></canvas>
  <ul id="labels">
  </ul>
  <div id="adder">
    <select id="fname_key_select"></select>
    <button id="add_graph" type="button" onclick="add_graph()">add graph</button>
  </div>
</div>

<pre id="log"></pre>

<style>
body {
  background-color: #333;
}
#stage {
  margin: 15px 15px 15px 15px;
}
#stage h1 {
  color: lightblue;
  font-weight: normal;
  font-size: 15px;
}
#stage canvas {
  border: 5px solid blue;
}
#labels {
  color: #aaa;
}
#adder {
  margin: 15px 0 15px 0;
}
#log {
  margin: 0 15px 15px 15px;
  color: yellow;
  background-color: #333;
  font-size: 9px;
  z-index: 1;
}
</style>

<script>
var colors = [0xff0000, 0x00ff00, 0x0000ff, 0xffff00, 0x00ffff, 0xff00ff];
var colori = 0;
function get_color() {
  var c = colors[colori];
  colori = (colori + 1) % colors.length;
  c = "000000" + c.toString(16);
  return "#" + c.slice(c.length - 6);
}

var added = {};

function add_graph() {
  var fname_key = $('#fname_key_select option:selected').val();
  if (!fname_key || fname_key == "") {
    alert("Please select a value to graph from the drop-down.");
    return;
  }
  if (added[fname_key]) {
    alert("The value '" + fname_key + "' is already graphed.");
    return;
  }
  added[fname_key] = 1;
  add_graph_fname_key(fname_key);

  $('#labels').html($('#labels').html() + '<li>' + fname_key + '</li>');

  var cvs = document.getElementById("c");
  cvs.style.backgroundColor = "white";
}

function add_graph_fname_key(fname_key) {
  var fname = fname_key.split(':')[0];
  var key   = fname_key.split(':')[1];
  for (var path in path_stat) {
    if (path.match(fname + '$')) {
      (function(path) {
        log('loading ' + fname_key + ' from ' + path + '...');
        $.getJSON(path, function(data) {
          add_graph_path_key(path, key, data);
          log('done');
        });
      })(path);
    }
  }
}

function add_graph_path_key(path, key, data) {
  log('processing ' + path + ':' + key + '...');

  var cvs = document.getElementById("c");
  var ctx = cvs.getContext("2d");

  var w = $('#c').width();
  var h = $('#c').height();

  ctx.beginPath();
  ctx.lineWidth = 1;
  ctx.strokeStyle = log(get_color());

  var key_stat = path_stat[path].keys[key];
  if (!key_stat) {
    log('missing ' + path + ' for ' + key);
    return;
  }

  var min = key_stat.min;
  var max = key_stat.max;
  var delta = max - min;
  if (delta > 0) {
    var x_inc = w / data.length;

    log(JSON.stringify([typeof(h), h, min, max, delta,  data.length]));

    var x = 0;
    for (var i = 0; i < data.length; i++) {
      var row = data[i];
      var val = row[key];
      var y = h * (val - min) / delta;

      if (i < 2) {
        log('plot ' + i + ', ' + y + ' ' + val + ' ' + JSON.stringify(row));
      }

      ctx.moveTo(x,h - y - 1);
      ctx.lineTo(x,h - y);

      x = x + x_inc;
      if (x >= w) {
        break;
      }
    }
  } else {
    ctx.moveTo(0, h - 1);
    ctx.lineTo(w, h - 1);
  }

  ctx.stroke();
}

function fill_select(path_stat) {
  var seen = {};
  var opts = [];
  for (var path in path_stat) {
    var stat = path_stat[path];
    for (var key in stat.keys) {
      var key_stat = stat.keys[key];
      if (key_stat.type == "number" && !seen[key]) {
        seen[key] = true;
        var path_split = path.split('/');
        opts.push(path_split[path_split.length - 1] + ":" + key);
      }
    }
  }
  opts.sort();
  for (var i in opts) {
    opts[i] = '<option value="' + opts[i] + '">' + opts[i] + "</option>";
  }
  $('#fname_key_select').html(opts.join(''));
}

function log(m) {
  $('#log').text(m + "\n" + $('#log').text());
  return m;
}

fill_select(path_stat);
</script>
</body>

